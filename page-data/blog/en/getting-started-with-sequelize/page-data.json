{"componentChunkName":"component---src-templates-blog-details-js","path":"/blog/en/getting-started-with-sequelize","result":{"data":{"markdownRemark":{"timeToRead":3,"frontmatter":{"date":"October 12th, 2020","title":"Getting Started With Sequelize","tags":["Node.js","Sequelize"],"slug":"getting-started-with-sequelize/"},"html":"<p>Sequelize is an Object Relational Mapper (ORM) which enables us to query and manipulate data stored in a relational database. There are several ORM for Node.js out there. Sequelize is one of them and it's pretty popular. In this short tutorial we will have a quick look at Sequelize then we will write a simple Node.js application to connect to a MySQL database.</p>\n<h2>Setting up the project</h2>\n<p>To start off, head over to command line and type the following commands to initialise the project:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`take sequelize_todo\nyarn init -y\nyarn add sequelize mysql2 dotenv ts-node typescript -D`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\">take sequelize_todo\nyarn init <span class=\"token operator\">-</span>y\nyarn add sequelize mysql2 dotenv ts<span class=\"token operator\">-</span>node typescript <span class=\"token operator\">-</span><span class=\"token constant\">D</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Next, create a file called <code class=\"language-text\">dbConnection.ts</code> in the root of the project:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`import { Sequelize } from &quot;sequelize&quot;\n\nconst sequelize = new Sequelize({\n  dialect: &quot;mysql&quot;,\n  username: process.env.DATABASE_USERNAME,\n  password: process.env.DATABASE_PASSWORD,\n  database: process.env.DATABASE_NAME,\n  port: +process.env.DATABASE_PORT || 3306,\n})\n\nexport const database = {\n  sequelize,\n}`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Sequelize <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"sequelize\"</span>\n\n<span class=\"token keyword\">const</span> sequelize <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sequelize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">dialect</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mysql\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_USERNAME</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_PASSWORD</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">database</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_NAME</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token operator\">+</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3306</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> database <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  sequelize<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>As you can see we have constructed an object using <code class=\"language-text\">Sequelize</code> constructor. This class needs some options which are required to connect to our MySQL database (that's why we have set <code class=\"language-text\">dialect</code> to \"mysql\". You can changes that to connect to other relational databases like SQL server, ...). Then we exported the newly created object.</p>\n<p>Next, create an <code class=\"language-text\">index.ts</code> file in the root of the project:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`import * as dotenv from &quot;dotenv&quot;\ndotenv.config()\nimport { database } from &quot;./dbConnection&quot;\n\n;(async () => {\n  await database.sequelize.sync()\n})()`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> dotenv <span class=\"token keyword\">from</span> <span class=\"token string\">\"dotenv\"</span>\ndotenv<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> database <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./dbConnection\"</span>\n\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> database<span class=\"token punctuation\">.</span>sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The first couple of lines are used to load <code class=\"language-text\">.env</code> file into <code class=\"language-text\">process.env</code>. This means that we will need to create another file in the root of the project to define our secret values:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`DATABASE_HOST = localhost\nDATABASE_USERNAME = root\nDATABASE_PASSWORD = PASSWORD\nDATABASE_NAME = DBNAME\nDATABASE_PORT = 3306`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token constant\">DATABASE_HOST</span> <span class=\"token operator\">=</span> localhost\n<span class=\"token constant\">DATABASE_USERNAME</span> <span class=\"token operator\">=</span> root\n<span class=\"token constant\">DATABASE_PASSWORD</span> <span class=\"token operator\">=</span> <span class=\"token constant\">PASSWORD</span>\n<span class=\"token constant\">DATABASE_NAME</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DBNAME</span>\n<span class=\"token constant\">DATABASE_PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3306</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>NOTE</strong>: Make sure you gitignore the <code class=\"language-text\">.env</code> file before pushing the code into remote repository.</p>\n<h2>Creating your first entity</h2>\n<p>Now we need to define our entity which is an abstraction that represents a table in your database. An entity is just a class that extends <code class=\"language-text\">Model</code>. So let's create a directory called <code class=\"language-text\">models</code> then create a file called <code class=\"language-text\">User.ts</code> inside that directory:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`import * as Sequelize from &quot;sequelize&quot;\n\nclass User extends Sequelize.Model {\n  username: string\n  createdAt: Date\n}\nexport const InitUser = (sequelize: Sequelize.Sequelize) => {\n  User.init(\n    {\n      username: Sequelize.DataTypes.STRING,\n      createdAt: Sequelize.DataTypes.DATE,\n    },\n    {\n      sequelize,\n      tableName: &quot;Users&quot;,\n    }\n  )\n}`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Sequelize <span class=\"token keyword\">from</span> <span class=\"token string\">\"sequelize\"</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Sequelize<span class=\"token punctuation\">.</span>Model</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> string\n  <span class=\"token literal-property property\">createdAt</span><span class=\"token operator\">:</span> Date\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">InitUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">sequelize</span><span class=\"token operator\">:</span> Sequelize<span class=\"token punctuation\">.</span>Sequelize</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  User<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> Sequelize<span class=\"token punctuation\">.</span>DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">createdAt</span><span class=\"token operator\">:</span> Sequelize<span class=\"token punctuation\">.</span>DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">DATE</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      sequelize<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">tableName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Users\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>To define our entity and its properties (Columns) we need to have access to the <code class=\"language-text\">sequelize</code> object which we exported previously. So let's head over to the <code class=\"language-text\">dbConnection.ts</code> file and update the file by passing <code class=\"language-text\">sequelize</code> object to the <code class=\"language-text\">InitUser</code> (which we have just exported):</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`export const database = {\n  sequelize,\n  User: InitUser(sequelize),\n}`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> database <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  sequelize<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">User</span><span class=\"token operator\">:</span> <span class=\"token function\">InitUser</span><span class=\"token punctuation\">(</span>sequelize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now if you run the project <code class=\"language-text\">ts-node index.ts</code> you will get this error:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`(node:11377) UnhandledPromiseRejectionWarning: SequelizeConnectionError: Unknown database 'sequelize_sample'`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span><span class=\"token number\">11377</span><span class=\"token punctuation\">)</span> UnhandledPromiseRejectionWarning<span class=\"token operator\">:</span> SequelizeConnectionError<span class=\"token operator\">:</span> Unknown database <span class=\"token string\">'sequelize_sample'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>It's because Sequelize doesn't know how to created the database so it needs a database to start with. So let's create the schema in MySQL:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`CREATE SCHEMA \\`sequelize_sample\\` ;`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">SCHEMA</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>sequelize_sample<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Now if you run the project one more time, Sequelize is able to create the table for you:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`Executing (default): CREATE TABLE IF NOT EXISTS \\`Users\\` (\\`id\\` INTEGER NOT NULL auto_increment , \\`username\\` VARCHAR(255), \\`createdAt\\` DATETIME, \\`updatedAt\\` DATETIME NOT NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB;\nExecuting (default): SHOW FULL COLUMNS FROM \\`Users\\`;\nExecuting (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='sequelize_sample' AND REFERENCED_TABLE_NAME IS NOT NULL;\nExecuting (default): ALTER TABLE \\`Users\\` CHANGE \\`username\\` \\`username\\` VARCHAR(255);\nExecuting (default): ALTER TABLE \\`Users\\` CHANGE \\`createdAt\\` \\`createdAt\\` DATETIME;\nExecuting (default): ALTER TABLE \\`Users\\` CHANGE \\`updatedAt\\` \\`updatedAt\\` DATETIME NOT NULL;\nExecuting (default): SHOW INDEX FROM \\`Users\\` FROM \\`sequelize_sample\\``, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token function\">Executing</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">CREATE</span> <span class=\"token constant\">TABLE</span> <span class=\"token constant\">IF</span> <span class=\"token constant\">NOT</span> <span class=\"token constant\">EXISTS</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Users</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">id</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token constant\">INTEGER</span> <span class=\"token constant\">NOT</span> <span class=\"token constant\">NULL</span> auto_increment <span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">username</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token constant\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">createdAt</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token constant\">DATETIME</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">updatedAt</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token constant\">DATETIME</span> <span class=\"token constant\">NOT</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PRIMARY</span> <span class=\"token constant\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">id</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token constant\">ENGINE</span><span class=\"token operator\">=</span>InnoDB<span class=\"token punctuation\">;</span>\n<span class=\"token function\">Executing</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">SHOW</span> <span class=\"token constant\">FULL</span> <span class=\"token constant\">COLUMNS</span> <span class=\"token constant\">FROM</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Users</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Executing</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">SELECT</span> <span class=\"token constant\">CONSTRAINT_NAME</span> <span class=\"token keyword\">as</span> constraint_name<span class=\"token punctuation\">,</span><span class=\"token constant\">CONSTRAINT_NAME</span> <span class=\"token keyword\">as</span> constraintName<span class=\"token punctuation\">,</span><span class=\"token constant\">CONSTRAINT_SCHEMA</span> <span class=\"token keyword\">as</span> constraintSchema<span class=\"token punctuation\">,</span><span class=\"token constant\">CONSTRAINT_SCHEMA</span> <span class=\"token keyword\">as</span> constraintCatalog<span class=\"token punctuation\">,</span><span class=\"token constant\">TABLE_NAME</span> <span class=\"token keyword\">as</span> tableName<span class=\"token punctuation\">,</span><span class=\"token constant\">TABLE_SCHEMA</span> <span class=\"token keyword\">as</span> tableSchema<span class=\"token punctuation\">,</span><span class=\"token constant\">TABLE_SCHEMA</span> <span class=\"token keyword\">as</span> tableCatalog<span class=\"token punctuation\">,</span><span class=\"token constant\">COLUMN_NAME</span> <span class=\"token keyword\">as</span> columnName<span class=\"token punctuation\">,</span><span class=\"token constant\">REFERENCED_TABLE_SCHEMA</span> <span class=\"token keyword\">as</span> referencedTableSchema<span class=\"token punctuation\">,</span><span class=\"token constant\">REFERENCED_TABLE_SCHEMA</span> <span class=\"token keyword\">as</span> referencedTableCatalog<span class=\"token punctuation\">,</span><span class=\"token constant\">REFERENCED_TABLE_NAME</span> <span class=\"token keyword\">as</span> referencedTableName<span class=\"token punctuation\">,</span><span class=\"token constant\">REFERENCED_COLUMN_NAME</span> <span class=\"token keyword\">as</span> referencedColumnName <span class=\"token constant\">FROM</span> <span class=\"token constant\">INFORMATION_SCHEMA</span><span class=\"token punctuation\">.</span><span class=\"token constant\">KEY_COLUMN_USAGE</span> where <span class=\"token constant\">TABLE_NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Users'</span> <span class=\"token constant\">AND</span> <span class=\"token constant\">CONSTRAINT_NAME</span><span class=\"token operator\">!=</span><span class=\"token string\">'PRIMARY'</span> <span class=\"token constant\">AND</span> <span class=\"token constant\">CONSTRAINT_SCHEMA</span><span class=\"token operator\">=</span><span class=\"token string\">'sequelize_sample'</span> <span class=\"token constant\">AND</span> <span class=\"token constant\">REFERENCED_TABLE_NAME</span> <span class=\"token constant\">IS</span> <span class=\"token constant\">NOT</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Executing</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">ALTER</span> <span class=\"token constant\">TABLE</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Users</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token constant\">CHANGE</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">username</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">username</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token constant\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Executing</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">ALTER</span> <span class=\"token constant\">TABLE</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Users</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token constant\">CHANGE</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">createdAt</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">createdAt</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token constant\">DATETIME</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Executing</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">ALTER</span> <span class=\"token constant\">TABLE</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Users</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token constant\">CHANGE</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">updatedAt</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">updatedAt</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token constant\">DATETIME</span> <span class=\"token constant\">NOT</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Executing</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">SHOW</span> <span class=\"token constant\">INDEX</span> <span class=\"token constant\">FROM</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Users</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token constant\">FROM</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">sequelize_sample</span><span class=\"token template-punctuation string\">`</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In the next blog post I will explain how to query and manipulate data. You can find the code here on GitHub. (<a href=\"https://github.com/SirwanAfifi/sequelize_sample\">https://github.com/SirwanAfifi/sequelize_sample</a>)</p>"}},"pageContext":{"slug":"getting-started-with-sequelize/"}},"staticQueryHashes":[]}