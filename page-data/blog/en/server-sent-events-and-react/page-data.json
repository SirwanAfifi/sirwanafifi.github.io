{"componentChunkName":"component---src-templates-blog-details-js","path":"/blog/en/server-sent-events-and-react","result":{"data":{"markdownRemark":{"timeToRead":3,"frontmatter":{"date":"December 15th, 2019","title":"Server-Sent Events and React","tags":["React","Realtime","ASP.NET Core","Node.js"],"slug":" Server-Sent-Events-and-React/"},"html":"<p>Server Sents Events are realtime events sent from the server to the client. It's a way to subscribe to a data stream sent by a server. Basically, it is a long-running HTTP connection with a particular mime type. Contrary to WebSocket, Server-Sent Events are unidirectional which clients subscribe to a channel and get data from the server. Updates for the data are pushed to the client in realtime as they occur, so the client doesn't need to initiate any requests. When using SSE, we should consider these:</p>\n<ul>\n<li>Requests can be redirected HTTP 301(permanent) &#x26;\n307(temporary)</li>\n<li>Only UTF-8 decoding is supported, no binary data</li>\n<li>Protocol supports multiple type of events, default is message</li>\n<li>Clients always reconnect (no need to handle)</li>\n<li>Server sends HTTP 204 No Content to stop reconnection</li>\n<li>Limited amount of global connections per site</li>\n</ul>\n<h2>Server Implementation:</h2>\n<p>Implementing it on the server is pretty easy. All we need to do is running an endless loop. Inside the loop, we should set the somespecial HTTP headers and push the data to the response every 2 seconds:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public void Configure(IApplicationBuilder app, IWebHostEnvironment env,\n        ILogger<Startup> loggerDebug, Datasource datasource)\n{\n    app.UseCors(&quot;MyPolicy&quot;);\n\n    app.UseRouting();\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapGet(&quot;/stream&quot;, async context =>\n        {\n            var response = context.Response;\n            response.Headers.Add(&quot;connection&quot;, &quot;keep-alive&quot;);\n            response.Headers.Add(&quot;cach-control&quot;, &quot;no-cache&quot;);\n            response.Headers.Add(&quot;content-type&quot;, &quot;text/event-stream&quot;);\n\n            while (true)\n            {\n                await response.Body\n                    .WriteAsync(Encoding.UTF8.GetBytes(\\$&quot;data: {JsonSerializer.Serialize(datasource.GetData())}\\n\\n&quot;));\n\n                await response.Body.FlushAsync();\n                await Task.Delay(2 * 1000);\n            }\n\n        });\n    });\n}`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IApplicationBuilder</span> app<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IWebHostEnvironment</span> env<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">ILogger<span class=\"token punctuation\">&lt;</span>Startup<span class=\"token punctuation\">></span></span> loggerDebug<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Datasource</span> datasource<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">UseCors</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyPolicy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">UseRouting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">UseEndpoints</span><span class=\"token punctuation\">(</span>endpoints <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        endpoints<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/stream\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> context <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> response <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">;</span>\n            response<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connection\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"keep-alive\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            response<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cach-control\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"no-cache\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            response<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content-type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/event-stream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span>Body\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">WriteAsync</span><span class=\"token punctuation\">(</span>Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"data: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">JsonSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span>datasource<span class=\"token punctuation\">.</span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\n\\n\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">FlushAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Here's also a Node.js version of the server:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`app.get(&quot;/stream&quot;, (req, res) => {\n  res.set({\n    &quot;Content-Type&quot;: &quot;text/event-stream&quot;,\n    &quot;Cache-Control&quot;: &quot;no-cache&quot;,\n    Connection: &quot;keep-alive&quot;,\n\n    // enabling CORS\n    &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;,\n    &quot;Access-Control-Allow-Headers&quot;:\n      &quot;Origin, X-Requested-With, Content-Type, Accept&quot;,\n  })\n\n  setInterval(() => {\n    res.write(\\`data: \\${JSON.stringify(getData())}\\n\\n\\`)\n  }, 2000)\n})`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/stream\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/event-stream\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"Cache-Control\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"no-cache\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">Connection</span><span class=\"token operator\">:</span> <span class=\"token string\">\"keep-alive\"</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// enabling CORS</span>\n    <span class=\"token string-property property\">\"Access-Control-Allow-Origin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"Access-Control-Allow-Headers\"</span><span class=\"token operator\">:</span>\n      <span class=\"token string\">\"Origin, X-Requested-With, Content-Type, Accept\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">data: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>As you can see, we are sending the data in a specific format:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">data: My message\\n\\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>Frontend Implementation</h2>\n<p>Implementing it on the client is fairly easy. All we need to do is making use of <code class=\"language-text\">EventSource</code> API, which is a standard interface to interact with the Server-Sent Events protocol. It basically opens a persistent connection to our HTTP server. The cool thing about the API is that it keeps the connection open until we call <code class=\"language-text\">EventSource.close()</code>:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`import React from &quot;react&quot;\n\nconst ProductList = () => {\n  const [data, setData] = React.useState([] as any)\n\n  const formatter = new Intl.NumberFormat(&quot;en-GB&quot;, {\n    style: &quot;currency&quot;,\n    currency: &quot;gbp&quot;,\n  })\n\n  React.useEffect(() => {\n    let eventSource = new EventSource(&quot;http://localhost:5000/stream&quot;)\n    eventSource.onmessage = e => updateProdutList(JSON.parse(e.data))\n  }, [])\n\n  const updateProdutList = (product: any) => {\n    setData([...product])\n  }\n\n  return (\n    <table className=&quot;table table-hover&quot;>\n      <thead className=&quot;thead-dark&quot;>\n        <tr>\n          <th>Id</th>\n          <th>Title</th>\n          <th>Price</th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((p: any) => (\n          <tr key={p.Id}>\n            <td>{p.Id}</td>\n            <td>{p.Title}</td>\n            <td>{formatter.format(p.Price)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  )\n}\n\nexport { ProductList }`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ProductList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> formatter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl</span><span class=\"token punctuation\">.</span><span class=\"token function\">NumberFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"en-GB\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    style<span class=\"token operator\">:</span> <span class=\"token string\">\"currency\"</span><span class=\"token punctuation\">,</span>\n    currency<span class=\"token operator\">:</span> <span class=\"token string\">\"gbp\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> eventSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:5000/stream\"</span><span class=\"token punctuation\">)</span>\n    eventSource<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token function\">updateProdutList</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateProdutList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>product<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>product<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>table className<span class=\"token operator\">=</span><span class=\"token string\">\"table table-hover\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>thead className<span class=\"token operator\">=</span><span class=\"token string\">\"thead-dark\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>tr<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>th<span class=\"token operator\">></span>Id<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>th<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>th<span class=\"token operator\">></span>Title<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>th<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>th<span class=\"token operator\">></span>Price<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>th<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>tr<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>thead<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>tbody<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token operator\">&lt;</span>tr key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>td<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>td<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>td<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>td<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>td<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>formatter<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>Price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>td<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>tr<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>tbody<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>table<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> ProductList <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Here we have passed in the SSE endpoint URL to the <code class=\"language-text\">EventSource</code> constructor. It then goes and establishes the communication channel between the React app and the server. Then we added <code class=\"language-text\">onmessage</code> event handler which is called when new data is received. <code class=\"language-text\">updateProdutList</code> is responsible for updating the state so once the data is received we update the state with the latest data. The process of subscribing to the endpoint happens once the <code class=\"language-text\">ProductList</code> component is mounted; that's why we used <code class=\"language-text\">useEffect</code> inside the component.</p>\n<p>Now we can test the application:</p>\n<img class=\"img-res\" src=\"/img/realtime.gif\" alt=\"Realtime communication\" />"}},"pageContext":{"slug":" Server-Sent-Events-and-React/"}},"staticQueryHashes":[]}