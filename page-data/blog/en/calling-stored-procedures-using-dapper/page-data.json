{"componentChunkName":"component---src-templates-blog-details-js","path":"/blog/en/calling-stored-procedures-using-dapper","result":{"data":{"markdownRemark":{"timeToRead":1,"frontmatter":{"date":"June 7th, 2019","title":"Calling Stored Procedures using Dapper","tags":["EF Core","Dapper","C#"],"slug":"Calling-Stored-Procedures/"},"html":"<p>Today I wanted to call a Stored Procedure using Entity Framework Core. It is possible using <code class=\"language-text\">DbSet.FromSql()</code> method, which is one of the powerful features of Entity Framework Core. It gives us the ability to run RAW SQL queries directly against a database:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`var blogs = context.Blogs\n    .FromSql(&quot;CALL GetBlogs&quot;)\n    .ToList();`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> blogs <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>Blogs\n    <span class=\"token punctuation\">.</span><span class=\"token function\">FromSql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CALL GetBlogs\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>But the problem is that the column names in the result set must match the column names that properties are mapped to. So, for example, given this Stored Procedure:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`CREATE DEFINER=\\`root\\`@\\`%\\` PROCEDURE \\`GetBlogs\\`()\nBEGIN\n\tselect avg(Rating) as average, min(Rating)as minimum, max(Rating) as maximum\n\tfrom blogs\nEND`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DEFINER</span><span class=\"token operator\">=</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>root<span class=\"token punctuation\">`</span></span><span class=\"token variable\">@`%`</span> <span class=\"token keyword\">PROCEDURE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>GetBlogs<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span>\n\t<span class=\"token keyword\">select</span> <span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>Rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> average<span class=\"token punctuation\">,</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>Rating<span class=\"token punctuation\">)</span><span class=\"token keyword\">as</span> minimum<span class=\"token punctuation\">,</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>Rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> maximum\n\t<span class=\"token keyword\">from</span> blogs\n<span class=\"token keyword\">END</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this case, your model must be exactly the same as the result set. Otherwise, you'd get an exception. Most of our Stored Procedure use some Aggregate functions. So I had to find another solution for it which was using Dapper. As you probably know, Dapper is nothing but a set of extension methods on top of <code class=\"language-text\">IDbConnection</code>. So to use it, you will need to install <code class=\"language-text\">Dapper</code> and register it using built-in IoC container in your ASP.NET Core application:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddTransient<IDbConnection>((sp) => new MySqlConnection(configuration.GetConnectionString(&quot;MyConnection&quot;)));\n`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddTransient</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IDbConnection<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MySqlConnection</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">.</span><span class=\"token function\">GetConnectionString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyConnection\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Then you can use it inside your services:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class MyService\n{\n    private readonly IDbConnection _dbConnection;\n\n    public MyService(IDbConnection dbConnection)\n    {\n        _dbConnection = dbConnection;\n    }\n\n    public Task<IEnumerable<BlogViewModel>> GetBlogs(long authorId)\n    {\n        var query = _dbConnection.QueryAsync<BlogViewModel>(&quot;GetBlogs&quot;, new { AuthorId = authorId },\n            commandType: CommandType.StoredProcedure);\n        return query;\n    }\n}`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IDbConnection</span> _dbConnection<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MyService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IDbConnection</span> dbConnection<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _dbConnection <span class=\"token operator\">=</span> dbConnection<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>BlogViewModel<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetBlogs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">long</span></span> authorId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> query <span class=\"token operator\">=</span> _dbConnection<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">QueryAsync</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>BlogViewModel<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GetBlogs\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> AuthorId <span class=\"token operator\">=</span> authorId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token named-parameter punctuation\">commandType</span><span class=\"token punctuation\">:</span> CommandType<span class=\"token punctuation\">.</span>StoredProcedure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> query<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"}},"pageContext":{"slug":"Calling-Stored-Procedures/"}},"staticQueryHashes":[]}