{"componentChunkName":"component---src-templates-blog-details-js","path":"/blog/en/different-ways-of-add-your-signature-on-a-pdf","result":{"data":{"markdownRemark":{"timeToRead":3,"frontmatter":{"date":"November 27th, 2022","title":"Different ways of add your signature on a PDF","tags":["C#","PowerShell","Python","Perl","Golang","Bash"],"slug":"different-ways-of-add-your-signature-on-a-pdf"},"html":"<p>My coworker wrote some Python code to add a signature to PDFs. Since Python isn't my thing, I wrote the same code in a few of my favorite languages. I don't like Python because I've never worked with it in production or because of its wired syntax. Anyway, here's the Python code I mentioned:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`import PyPDF2\nfrom fpdf import FPDF\nimport time\n​\noutput_file = &quot;merged.pdf&quot;\nwatermark_file = &quot;converted.pdf&quot;\n​\ndef convert_to_pdf():\n    path_to_image = input('image to add: ')\n    pdf = FPDF()\n    pdf.add_page()\n    pdf.image(path_to_image,130,270, 75, 25)\n    pdf.output('converted.pdf')\n​\ndef merge_pdf():\n    input_file = input('Path to target pdf: ')\n    with open(input_file, &quot;rb&quot;) as filehandle_input:\n    # read content of the original file\n        pdf = PyPDF2.PdfFileReader(filehandle_input)\n\n        with open(watermark_file, &quot;rb&quot;) as filehandle_watermark:\n            # read content of the watermark\n            watermark = PyPDF2.PdfFileReader(filehandle_watermark)\n\n            # get first page of the original PDF\n            first_page = pdf.getPage(0)\n\n            # get first page of the watermark PDF\n            first_page_watermark = watermark.getPage(0)\n\n            # merge the two pages\n            first_page.merge_page(first_page_watermark)\n\n            # create a pdf writer object for the output file\n            pdf_writer = PyPDF2.PdfFileWriter()\n\n            # add page\n            pdf_writer.addPage(first_page)\n\n            with open(output_file, &quot;wb&quot;) as filehandle_output:\n                # write the watermarked file to the new file\n                pdf_writer.write(filehandle_output)\n​\nconvert_to_pdf()\ntime.sleep(1)\nmerge_pdf()`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> PyPDF2\n<span class=\"token keyword\">from</span> fpdf <span class=\"token keyword\">import</span> FPDF\n<span class=\"token keyword\">import</span> time\n​\noutput_file <span class=\"token operator\">=</span> <span class=\"token string\">\"merged.pdf\"</span>\nwatermark_file <span class=\"token operator\">=</span> <span class=\"token string\">\"converted.pdf\"</span>\n​\n<span class=\"token keyword\">def</span> <span class=\"token function\">convert_to_pdf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    path_to_image <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image to add: '</span><span class=\"token punctuation\">)</span>\n    pdf <span class=\"token operator\">=</span> FPDF<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pdf<span class=\"token punctuation\">.</span>add_page<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pdf<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">(</span>path_to_image<span class=\"token punctuation\">,</span><span class=\"token number\">130</span><span class=\"token punctuation\">,</span><span class=\"token number\">270</span><span class=\"token punctuation\">,</span> <span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\n    pdf<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span><span class=\"token string\">'converted.pdf'</span><span class=\"token punctuation\">)</span>\n​\n<span class=\"token keyword\">def</span> <span class=\"token function\">merge_pdf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    input_file <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Path to target pdf: '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>input_file<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> filehandle_input<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># read content of the original file</span>\n        pdf <span class=\"token operator\">=</span> PyPDF2<span class=\"token punctuation\">.</span>PdfFileReader<span class=\"token punctuation\">(</span>filehandle_input<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>watermark_file<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> filehandle_watermark<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># read content of the watermark</span>\n            watermark <span class=\"token operator\">=</span> PyPDF2<span class=\"token punctuation\">.</span>PdfFileReader<span class=\"token punctuation\">(</span>filehandle_watermark<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># get first page of the original PDF</span>\n            first_page <span class=\"token operator\">=</span> pdf<span class=\"token punctuation\">.</span>getPage<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># get first page of the watermark PDF</span>\n            first_page_watermark <span class=\"token operator\">=</span> watermark<span class=\"token punctuation\">.</span>getPage<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># merge the two pages</span>\n            first_page<span class=\"token punctuation\">.</span>merge_page<span class=\"token punctuation\">(</span>first_page_watermark<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># create a pdf writer object for the output file</span>\n            pdf_writer <span class=\"token operator\">=</span> PyPDF2<span class=\"token punctuation\">.</span>PdfFileWriter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># add page</span>\n            pdf_writer<span class=\"token punctuation\">.</span>addPage<span class=\"token punctuation\">(</span>first_page<span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>output_file<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> filehandle_output<span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># write the watermarked file to the new file</span>\n                pdf_writer<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>filehandle_output<span class=\"token punctuation\">)</span>\n​\nconvert_to_pdf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nmerge_pdf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>There's nothing complicated about the code. A PDF is created by converting the image into a PDF and merging it with the PDF that needs to have a signature.</p>\n<h2>PowerShell</h2>\n<p>I will start with the PowerShell version, I have used iTextSharp, which is a .NET library to manipulate PDFs. The code is pretty straightforward:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`Add-Type -Path &quot;*.dll&quot;\n\\$pdf = [iTextSharp.text.pdf.PdfReader]::new(&quot;\\$(Get-Location)/invoice.pdf&quot;)\n\\$fs = [System.IO.FileStream]::new(&quot;\\$(Get-Location)/signed-invoice.pdf&quot;,\n    [System.IO.FileMode]::Create)\n\\$stamper = [iTextSharp.text.pdf.PdfStamper]::new(\\$pdf, \\$fs)\n\\$gs = [iTextSharp.text.pdf.PdfGState]::new()\n\\$content = \\$stamper.GetOverContent(1)\n\\$content.SetGState(\\$gs)\n\\$width = \\$pdf.GetPageSize(1).Width\n\\$image = [iTextSharp.text.Image]::GetInstance(&quot;\\$(Get-Location)/sign.jpg&quot;)\n\\$image.SetAbsolutePosition(\\$width - 130, 50)\n\\$image.ScaleAbsolute(100, 30)\n\\$content.AddImage(\\$image)\n\\$stamper.Close()\n\\$pdf.Close()\n\\$fs.Dispose()`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-powershell line-numbers\"><code class=\"language-powershell\"><span class=\"token function\">Add-Type</span> <span class=\"token operator\">-</span>Path <span class=\"token string\">\"*.dll\"</span>\n<span class=\"token variable\">$pdf</span> = <span class=\"token namespace\">[iTextSharp.text.pdf.PdfReader]</span>::new<span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token function\">$<span class=\"token punctuation\">(</span><span class=\"token function\">Get-Location</span><span class=\"token punctuation\">)</span></span>/invoice.pdf\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$fs</span> = <span class=\"token namespace\">[System.IO.FileStream]</span>::new<span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token function\">$<span class=\"token punctuation\">(</span><span class=\"token function\">Get-Location</span><span class=\"token punctuation\">)</span></span>/signed-invoice.pdf\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token namespace\">[System.IO.FileMode]</span>::Create<span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$stamper</span> = <span class=\"token namespace\">[iTextSharp.text.pdf.PdfStamper]</span>::new<span class=\"token punctuation\">(</span><span class=\"token variable\">$pdf</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$fs</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$gs</span> = <span class=\"token namespace\">[iTextSharp.text.pdf.PdfGState]</span>::new<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$content</span> = <span class=\"token variable\">$stamper</span><span class=\"token punctuation\">.</span>GetOverContent<span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$content</span><span class=\"token punctuation\">.</span>SetGState<span class=\"token punctuation\">(</span><span class=\"token variable\">$gs</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$width</span> = <span class=\"token variable\">$pdf</span><span class=\"token punctuation\">.</span>GetPageSize<span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Width\n<span class=\"token variable\">$image</span> = <span class=\"token namespace\">[iTextSharp.text.Image]</span>::GetInstance<span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token function\">$<span class=\"token punctuation\">(</span><span class=\"token function\">Get-Location</span><span class=\"token punctuation\">)</span></span>/sign.jpg\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$image</span><span class=\"token punctuation\">.</span>SetAbsolutePosition<span class=\"token punctuation\">(</span><span class=\"token variable\">$width</span> <span class=\"token operator\">-</span> 130<span class=\"token punctuation\">,</span> 50<span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$image</span><span class=\"token punctuation\">.</span>ScaleAbsolute<span class=\"token punctuation\">(</span>100<span class=\"token punctuation\">,</span> 30<span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$content</span><span class=\"token punctuation\">.</span>AddImage<span class=\"token punctuation\">(</span><span class=\"token variable\">$image</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$stamper</span><span class=\"token punctuation\">.</span>Close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$pdf</span><span class=\"token punctuation\">.</span>Close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$fs</span><span class=\"token punctuation\">.</span>Dispose<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>C#</h2>\n<p>The C# version is almost the same as the PowerShell one. I have used the same library, iTextSharp:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`using iTextSharp.text;\nusing iTextSharp.text.pdf;\n\nvar pdfReader = new PdfReader(&quot;../invoice.pdf&quot;);\nvar outStream = new FileStream(&quot;../signed-invoice.pdf&quot;, FileMode.Create);\nvar pdfStamper = new PdfStamper(pdfReader, outStream);\nvar gs = new PdfGState();\nvar content = pdfStamper.GetOverContent(1);\ncontent.SetGState(gs);\nvar width = pdfReader.GetPageSize(1).Width;\nvar baseDir = AppDomain.CurrentDomain.BaseDirectory.Split(new[] { &quot;bin&quot; }, StringSplitOptions.None)[0];\nvar signFile = Path.Combine(baseDir, &quot;..&quot;, &quot;sign.jpg&quot;);\nvar image = Image.GetInstance(signFile);\nimage.SetAbsolutePosition(width - 130, 50);\nimage.ScaleAbsolute(100, 30);\ncontent.AddImage(image);\npdfStamper.Close();\npdfReader.Close();\noutStream.Close();\n`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">iTextSharp<span class=\"token punctuation\">.</span>text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">iTextSharp<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span>pdf</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pdfReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PdfReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../invoice.pdf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> outStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FileStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../signed-invoice.pdf\"</span><span class=\"token punctuation\">,</span> FileMode<span class=\"token punctuation\">.</span>Create<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pdfStamper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PdfStamper</span><span class=\"token punctuation\">(</span>pdfReader<span class=\"token punctuation\">,</span> outStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> gs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PdfGState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> content <span class=\"token operator\">=</span> pdfStamper<span class=\"token punctuation\">.</span><span class=\"token function\">GetOverContent</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontent<span class=\"token punctuation\">.</span><span class=\"token function\">SetGState</span><span class=\"token punctuation\">(</span>gs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> width <span class=\"token operator\">=</span> pdfReader<span class=\"token punctuation\">.</span><span class=\"token function\">GetPageSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Width<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> baseDir <span class=\"token operator\">=</span> AppDomain<span class=\"token punctuation\">.</span>CurrentDomain<span class=\"token punctuation\">.</span>BaseDirectory<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"bin\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> StringSplitOptions<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> signFile <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">.</span><span class=\"token function\">Combine</span><span class=\"token punctuation\">(</span>baseDir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"..\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sign.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span>signFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimage<span class=\"token punctuation\">.</span><span class=\"token function\">SetAbsolutePosition</span><span class=\"token punctuation\">(</span>width <span class=\"token operator\">-</span> <span class=\"token number\">130</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimage<span class=\"token punctuation\">.</span><span class=\"token function\">ScaleAbsolute</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontent<span class=\"token punctuation\">.</span><span class=\"token function\">AddImage</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npdfStamper<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npdfReader<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noutStream<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Golang</h2>\n<p>As you can see the Golang version is pretty short. It uses the <code class=\"language-text\">pdft</code> library to add the signature to the PDF. I could have removed the error handling to make it even shorter.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`package main\n\nimport (\n\t&quot;io/ioutil&quot;\n\n\t&quot;github.com/signintech/pdft&quot;\n)\n\nfunc main() {\n\tvar pt pdft.PDFt\n\terr := pt.Open(&quot;../invoice.pdf&quot;)\n\tif err != nil {\n\t\tpanic(&quot;Couldn't open pdf.&quot;)\n\t}\n\tpic, err := ioutil.ReadFile(&quot;../sign.jpg&quot;)\n\tif err != nil {\n\t\tpanic(&quot;Couldn't read pic.&quot;)\n\t}\n\terr = pt.InsertImg(pic, 1, 1950.0, -2450.0, 400, 100)\n\tif err != nil {\n\t\tpanic(&quot;Couldn't insert image&quot;)\n\t}\n\terr = pt.Save(&quot;../signed-invoice.pdf&quot;)\n\tif err != nil {\n\t\tpanic(&quot;Couldn't save pdf.&quot;)\n\t}\n}`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"io/ioutil\"</span>\n\n\t<span class=\"token string\">\"github.com/signintech/pdft\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> pt pdft<span class=\"token punctuation\">.</span>PDFt\n\terr <span class=\"token operator\">:=</span> pt<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../invoice.pdf\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Couldn't open pdf.\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tpic<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../sign.jpg\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Couldn't read pic.\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\terr <span class=\"token operator\">=</span> pt<span class=\"token punctuation\">.</span><span class=\"token function\">InsertImg</span><span class=\"token punctuation\">(</span>pic<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1950.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2450.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Couldn't insert image\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\terr <span class=\"token operator\">=</span> pt<span class=\"token punctuation\">.</span><span class=\"token function\">Save</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../signed-invoice.pdf\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Couldn't save pdf.\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Perl</h2>\n<p>The Perl version is also pretty short. It uses the <code class=\"language-text\">PDF::API2</code> library to add the signature to the PDF:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`use PDF::API2;\nmy \\$pdf = PDF::API2->open('../invoice.pdf');\nmy \\$img = \\$pdf->image_jpeg('../sign.jpg');\nmy \\$page = \\$pdf->openpage(1);\nmy \\$gfx = \\$page->gfx;\n\\$gfx->image(\\$img, 1950, 3200, 400, 100);\n\\$pdf->saveas('../signed-invoice.pdf');`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"perl\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-perl line-numbers\"><code class=\"language-perl\"><span class=\"token keyword\">use</span> PDF<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>API2<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">my</span> <span class=\"token variable\">$pdf</span> <span class=\"token operator\">=</span> PDF<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>API2<span class=\"token operator\">-></span>open<span class=\"token punctuation\">(</span><span class=\"token string\">'../invoice.pdf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">my</span> <span class=\"token variable\">$img</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$pdf</span><span class=\"token operator\">-></span>image_jpeg<span class=\"token punctuation\">(</span><span class=\"token string\">'../sign.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">my</span> <span class=\"token variable\">$page</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$pdf</span><span class=\"token operator\">-></span>openpage<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">my</span> <span class=\"token variable\">$gfx</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$page</span><span class=\"token operator\">-></span>gfx<span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$gfx</span><span class=\"token operator\">-></span>image<span class=\"token punctuation\">(</span><span class=\"token variable\">$img</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1950</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$pdf</span><span class=\"token operator\">-></span>saveas<span class=\"token punctuation\">(</span><span class=\"token string\">'../signed-invoice.pdf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Bash</h2>\n<p>The Bash version is the shortest one. It uses the <code class=\"language-text\">pdftk</code> command to add the signature to the PDF. The only thing that needs to be done is to create a PDF with the signature on it:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`pdftk ./invoice.pdf stamp ./a4-sign.pdf output signed-invoice.pdf`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">pdftk ./invoice.pdf stamp ./a4-sign.pdf output signed-invoice.pdf</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>"}},"pageContext":{"slug":"different-ways-of-add-your-signature-on-a-pdf"}},"staticQueryHashes":[]}