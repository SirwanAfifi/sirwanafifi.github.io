{"componentChunkName":"component---src-templates-blog-details-js","path":"/blog/en/sql-server-on-linux-in-docker-on-a-mac","result":{"data":{"markdownRemark":{"timeToRead":3,"frontmatter":{"date":"June 4th, 2017","title":"SQL Server on Linux in Docker on a Mac","tags":["Docker","ASP.NET Core"],"slug":"SQL-Server-on-Linux-in-Docker-on-a-Mac/"},"html":"<p>Over the last few months, I have been working on a couple of ASP.NET Core projects, it's been great experience so far becuase I can easily work on <a href=\"http://sirwan.info/My-first-experiences-with-Linux\">different platforms</a> while working on these projects. I recently bought a MacBook Pro and have decided to do .NET projects on macOS since then.</p>\n<p>Fortunately working with projects is not a pain in the neck anymore, with help of <a href=\"https://www.docker.com/what-docker\">Docker</a> you can easily setup up a complex development environment in minutes. It actually simplifies the process of building and shipping, running your apps on differente environments.</p>\n<p>The first challenge I faced when using macOS was connecting to and using SQL Server. Thanks to Docker and SQL Server for Linux. It's an instance of SQL Server as a docker container and it's super-fast so that it runs in seconds.</p>\n<img class=\"img-res\" src=\"/img/docker.png\" />\n<hr>\n<h2>Installing Docker for Mac</h2>\n<p>In order to get Docker to work you will need to install Docker for Mac, you can follow <a href=\"https://docs.docker.com/docker-for-mac\">these steps</a> to install it. Once Docker installation is done, it will automatically be started:\n<br /></p>\n<img class=\"img-res\" src=\"/img/docker-running.png\" />\n<p>You can also run <code class=\"language-text\">docker --version</code> to verify that Docker is working as expected.</p>\n<hr>\n<h2>Pulling and running Docker image</h2>\n<p>Next, you can install and run SQL <a href=\"https://hub.docker.com/r/microsoft/mssql-server-linux\">Server on Linux docker image</a> using following command:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=Passowrd’ -p 1433:1433 -d microsoft/mssql-server-linux\n`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"token function\">docker</span> run -e <span class=\"token string\">'ACCEPT_EULA=Y'</span> -e 'SA_PASSWORD<span class=\"token operator\">=</span>Passowrd’ -p <span class=\"token number\">1433</span>:1433 -d microsoft/mssql-server-linux\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>This command will install and run the SQL Server image. Now SQL Server is running locally in Docker container:</p>\n<img class=\"img-res\" src=\"/img/sql-server-is-running.png\" />\n<p>You can use its connection string in your ASP.NET Core application:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class MvcMovieContext : DbContext\n{\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        optionsBuilder.UseSqlServer(@&quot;Data Source=localhost;Initial Catalog=MovieDB;User ID=sa;Password=StrongPassword&quot;);\n    }\n\n    public DbSet<Movie> Movies { get; set; }\n}`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MvcMovieContext</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">DbContext</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnConfiguring</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DbContextOptionsBuilder</span> optionsBuilder<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        optionsBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">UseSqlServer</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"Data Source=localhost;Initial Catalog=MovieDB;User ID=sa;Password=StrongPassword\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">DbSet<span class=\"token punctuation\">&lt;</span>Movie<span class=\"token punctuation\">></span></span> Movies <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now if we run migration, the <code class=\"language-text\">MovieDB</code> database will be created in the running docker container:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`dotnet ef database update\n`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">dotnet ef database update\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h2>Connecting and quering the databse</h2>\n<p>There are several ways to connect and query a database running in Docker container, one way is using a command line tool called <code class=\"language-text\">sqlcmd</code>:</p>\n<img class=\"img-res\" src=\"/img/sqlcmd.png\" />\n<p>Personally I use <code class=\"language-text\">mssql</code> extension for Visual Studio Code. becuase it's really easy to use so you don't have to write your queries in command line mode. If you have not already installed this extension, all you need to do is press <code class=\"language-text\">⌘ + P</code> and type <code class=\"language-text\">ext install mssql</code> then press enter to install it.</p>\n<p>In order to connect and query your database first, you need to write your SQL queries into a <code class=\"language-text\">SQL</code> file in VS Code then press <code class=\"language-text\">⌘ + Shift + P</code> then choose <code class=\"language-text\">Create Connection Profile</code>, follow the prompts to specify the connection properties for the new connection profile. At the end you should have following settings:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`{\n  &quot;mssql.connections&quot;: [\n    {\n      &quot;authenticationType&quot;: &quot;SqlLogin&quot;,\n      &quot;server&quot;: &quot;localhost&quot;,\n      &quot;database&quot;: &quot;MovieDB&quot;,\n      &quot;user&quot;: &quot;SA&quot;,\n      &quot;password&quot;: &quot;&quot;,\n      &quot;savePassword&quot;: true,\n      &quot;profileName&quot;: &quot;MovieDB&quot;\n    }\n  ]\n}`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"mssql.connections\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"authenticationType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SqlLogin\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"database\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MovieDB\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SA\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"password\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"savePassword\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"profileName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MovieDB\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>As you can see <code class=\"language-text\">mssql.connections</code> takes an array, it means that you can define as many connection profiles as you want. Once you defined your profile, you can use it to execute your queries then the result will be shown as a seperate window:</p>\n<img class=\"img-res\" src=\"/img/query_result_mssql.png\" />\n<p>As you can see working with SQL Server on macOS is really straightforward. Something like this was not possible in .NET before but nowadays you can develope .NET applications on OS of your choice. that's why I’m more excited about .NET more than ever.</p>"}},"pageContext":{"slug":"SQL-Server-on-Linux-in-Docker-on-a-Mac/"}},"staticQueryHashes":[]}