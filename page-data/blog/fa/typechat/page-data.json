{"componentChunkName":"component---src-templates-blog-details-js","path":"/blog/fa/typechat","result":{"data":{"markdownRemark":{"timeToRead":4,"frontmatter":{"date":"August 18th, 2023","title":"typechat","tags":["TypeScript","GPT","OpenAI","AI"],"slug":"typechat"},"html":"<p>در دنیای Generative AI مفهوم Prompt نقش خیلی مهمی را ایفا میکند؛ چون برای گرفتن یک خروجی با کیفیت میبایست یک ورودی یا Prompt با کیفیت و خلاقانه داشته باشیم؛ این قضیه به قدری اهمیت دارد که یک عنوان شغلی هم برای آن در نظر گرفته شده است Prompt Engineer؛ چون اگر یک Prompt به خوبی نوشته نشود، نتایج غیرواقعی و نادرستی میتواند تولید کند که به این رفتار <a href=\"https://en.wikipedia.org/wiki/Hallucination_(artificial_intelligence)\">Hallucination</a> یا Fabulations گفته میشود. برای این LLMها دادن کانتکست اهمیت زیادی دارد چون یک Prompt به تنهایی پاسخ مطلوب را برایمان جنریت نمیکند و باید تا جایی که امکان دارد توضیحات کافی را بدهیم. به صورت پیش‌فرض هم همه در دادن instruction خوب نیستند و این خودش یک مهارت محسوب میشه بخاطر همین است که Prompt Engineering مطرح میشود. OpenAI هم یکسری Best Practise برای نوشتن Promptهای خوب دارد که از <a href=\"https://help.openai.com/en/collections/3675942-prompt-engineering\">اینجا</a> یا <a href=\"https://cloud.google.com/blog/products/application-development/five-best-practices-for-prompt-engineering\">اینجا</a> میتوانید مشاهده کنید. به عنوان مثال برای ChatGPT با تغییر کوچکی در نحوه پرسیدن سوال نتایج خیلی متفاوتی دریافت خواهیم کرد. ایده‌هایی که بهتر است به کار بگیریم:</p>\n<p><strong>دادن نقش یا Personas</strong></p>\n<p>مثلاً با عباراتی از قبیل act as a... میتوانیم یک نقش برای پاسخ تعیین کنیم.</p>\n<p>​     Act as a marketing copywriter, and write three ads for...</p>\n<p><strong>تعیین Tone</strong></p>\n<p>مثلاً میتوانیم تعیین کنیم که خروجی که تولید میشود چه tone داشته باشد:</p>\n<p>​    Use a friendly and inviting tone...</p>\n<p>نکته‌ایی که در مورد این LLMها وجود دارد این است که در تولید متن به صورت پیش‌فرض عالی هستند در واقع بیشترین کاربرد آنها در تبدیل یک متن به یک متن دیگر است یعنی یک نوع text to text transformation هستند. این شاید نیاز خیلی‌ها را برطرف کند اما اگر خروجی را بخواهیم درون یک application code استفاده کنیم چطور؟ قاعدتاً میبایست خروجی متن را پارز کنیم که خود این فرآیند چالش‌های خاص خودش را دارد. اخیراً یک پروژه جالب از Microsoft با نام <a href=\"https://github.com/microsoft/TypeChat\">TypeChat</a> منتشر شده است که دقیقاً همینکار را انجام میدهد؛ با کمک TypeScript میتوانیم فرمت یا اسکیمای خروجی موردنظرمان را از این LLMها درخواست کنیم. خوبی داستان این است که بیشتر این LLMها خیلی خوب با TypeScript و JSON آشنا هستند. در نتیجه به راحتی میتوانیم خروجی JSON تولید شده توسط این LLMها را درون کدهایمان استفاده کنیم؛ در اینحالت اپلیکیشن ما به جای سروکار داشتن با یک دیتای unstructured با یک ساختار مشخص یا structured سروکار خواهد داشت. مزیت TypeScript نیز این است که خیلی نسبت به JSON Schema به اصطلاح compactتر است؛ چیزی حدود ۵ برابر compactتر است.</p>\n<p>برای استفاده از TypeChat نیاز به API Key یکی از سرویس‌های Azure OpenAI یا Open AI خواهید داشت. برای APIیی که OpenAI ارائه میدهد نیاز به یک اشتراک داریم که البته با اشتراک ChatGPT متفاوت است و آن را باید جدا تهیه کرد؛ برای محاسبه هزینه استفاده از این API میتواند از این <a href=\"https://gptforwork.com/tools/openai-chatgpt-api-pricing-calculator\">لینک</a> کمک بگیرید. در ادامه میخواهیم یک پروژه ساده Node/TypeScript درست کنیم که کاربر با وارد کردن Prompt بتواند یک جدول درون یک دیتابیس MySQL ایجاد کند؛ برای اینکار اسکیمای مدنظرم را با کمک TypeScript تعیین میکنم؛ در واقع میخواهیم خروجی پاسخی که از LLM برای جنریت میکند را مشخص کنیم:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`export interface DatabaseSchema {\n  databaseName: string;\n  tables: Table[];\n}\n\nexport interface Table {\n  name: string;\n  columns: Column[];\n}\n\nexport interface Column {\n  name: string;\n  type:\n    | &quot;BIT&quot;\n    | &quot;TINYINT&quot;\n    | &quot;SMALLINT&quot;\n    | &quot;MEDIUMINT&quot;\n    | &quot;INT&quot;\n    | &quot;INTEGER&quot;\n    | &quot;BIGINT&quot;\n    | &quot;REAL&quot;\n    | &quot;DOUBLE&quot;\n    | &quot;FLOAT&quot;\n    | &quot;DECIMAL&quot;\n    | &quot;NUMERIC&quot;\n    | &quot;DATE&quot;\n    | &quot;TIME&quot;\n    | &quot;TIMESTAMP&quot;\n    | &quot;DATETIME&quot;\n    | &quot;VARCHAR(255)&quot;\n    | &quot;TEXT&quot;\n    | &quot;JSON&quot;;\n  allowNull: boolean;\n}`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DatabaseSchema</span> <span class=\"token punctuation\">{</span>\n  databaseName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  tables<span class=\"token operator\">:</span> Table<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Table</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  columns<span class=\"token operator\">:</span> Column<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Column</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  type<span class=\"token operator\">:</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">\"BIT\"</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">\"TINYINT\"</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">\"SMALLINT\"</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">\"MEDIUMINT\"</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">\"INT\"</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">\"INTEGER\"</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">\"BIGINT\"</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">\"REAL\"</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">\"DOUBLE\"</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">\"FLOAT\"</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">\"DECIMAL\"</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">\"NUMERIC\"</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">\"DATE\"</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">\"TIME\"</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">\"TIMESTAMP\"</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">\"DATETIME\"</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">\"VARCHAR(255)\"</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">\"TEXT\"</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">\"JSON\"</span><span class=\"token punctuation\">;</span>\n  allowNull<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>بنابراین اگر یک Prompt اینچنینی داشته باشیم:</p>\n<blockquote>\n<p>I want a table called 'Employee' with these columns: 'EmployeeID', 'FirstName', 'LastName', 'DepartmentID', 'DepartmentName', 'ManagerID', 'ManagerName'.</p>\n</blockquote>\n<p>خروجی زیر برایمان مطابق با اسکیمایی که تعریف کردیم جنریت خواهد شد:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`{\n  &quot;databaseName&quot;: &quot;&quot;,\n  &quot;tables&quot;: [\n    {\n      &quot;name&quot;: &quot;Employee&quot;,\n      &quot;columns&quot;: [\n        {\n          &quot;name&quot;: &quot;EmployeeID&quot;,\n          &quot;type&quot;: &quot;INT&quot;,\n          &quot;allowNull&quot;: false\n        },\n        {\n          &quot;name&quot;: &quot;FirstName&quot;,\n          &quot;type&quot;: &quot;VARCHAR(255)&quot;,\n          &quot;allowNull&quot;: false\n        },\n        {\n          &quot;name&quot;: &quot;LastName&quot;,\n          &quot;type&quot;: &quot;VARCHAR(255)&quot;,\n          &quot;allowNull&quot;: false\n        },\n        {\n          &quot;name&quot;: &quot;DepartmentID&quot;,\n          &quot;type&quot;: &quot;INT&quot;,\n          &quot;allowNull&quot;: false\n        },\n        {\n          &quot;name&quot;: &quot;DepartmentName&quot;,\n          &quot;type&quot;: &quot;VARCHAR(255)&quot;,\n          &quot;allowNull&quot;: false\n        },\n        {\n          &quot;name&quot;: &quot;ManagerID&quot;,\n          &quot;type&quot;: &quot;INT&quot;,\n          &quot;allowNull&quot;: false\n        },\n        {\n          &quot;name&quot;: &quot;ManagerName&quot;,\n          &quot;type&quot;: &quot;VARCHAR(255)&quot;,\n          &quot;allowNull&quot;: false\n        }\n      ]\n    }\n  ]\n}`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"databaseName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"tables\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Employee\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"columns\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"EmployeeID\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"INT\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"allowNull\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"FirstName\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VARCHAR(255)\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"allowNull\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"LastName\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VARCHAR(255)\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"allowNull\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"DepartmentID\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"INT\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"allowNull\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"DepartmentName\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VARCHAR(255)\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"allowNull\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ManagerID\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"INT\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"allowNull\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ManagerName\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VARCHAR(255)\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"allowNull\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>با خروجی فوق به راحتی میتوانیم توسط هر ORM جدول مدنظر را درون دیتابیس‌مان ایجاد کنیم؛ مزیت TypeChat این است که یک نوع validator نیز دارد یعنی اگر خروجی LLM مطابق اسکیمای تعریف شده نباشد یک خطا صادر خواهد شد. در ادامه کدهای مثال فوق را مشاهده میکنید:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`import * as fs from &quot;fs&quot;;\nimport * as path from &quot;path&quot;;\nimport dotenv from &quot;dotenv&quot;;\nimport * as typechat from &quot;typechat&quot;;\nimport { DatabaseSchema } from &quot;./schema&quot;;\nimport knex from &quot;knex&quot;;\n\ndotenv.config();\n\nexport const Database = knex({\n  client: &quot;mysql2&quot;,\n  connection: {\n    host: process.env.DATABASE_HOST,\n    port: Number(process.env.DATABASE_PORT),\n    user: process.env.DATABASE_USER,\n    password: process.env.DATABASE_PASSWORD,\n    database: process.env.DATABASE_NAME,\n  },\n});\n\nconst model = typechat.createLanguageModel(process.env);\n\nconst schema = fs.readFileSync(path.join(__dirname, &quot;schema.ts&quot;), &quot;utf8&quot;);\nconst translator = typechat.createJsonTranslator<DatabaseSchema>(\n  model,\n  schema,\n  &quot;DatabaseSchema&quot;\n);\n\ntypechat.processRequests(&quot;😀> &quot;, &quot;./input.txt&quot;, async (request) => {\n  try {\n    await Database.raw(&quot;SELECT 1&quot;);\n    const response = await translator.translate(request);\n    if (!response.success) {\n      console.log(response.message);\n      return;\n    }\n    console.log(JSON.stringify(response.data, null, 2));\n    const { tables } = response.data;\n    for (const table of tables) {\n      const { name, columns } = table;\n      let CREATE_TABLE = \\`CREATE TABLE IF NOT EXISTS \\${name} (\\`;\n      for (const column of columns) {\n        const { name, type, allowNull } = column;\n        CREATE_TABLE += \\`\\n  \\${name} \\${type}\\${allowNull ? &quot;&quot; : &quot; NOT NULL&quot;},\\`;\n      }\n      CREATE_TABLE = CREATE_TABLE.slice(0, -1) + &quot;);&quot;;\n      await Database.raw(CREATE_TABLE);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n});\n`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> dotenv <span class=\"token keyword\">from</span> <span class=\"token string\">\"dotenv\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> typechat <span class=\"token keyword\">from</span> <span class=\"token string\">\"typechat\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DatabaseSchema <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./schema\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> knex <span class=\"token keyword\">from</span> <span class=\"token string\">\"knex\"</span><span class=\"token punctuation\">;</span>\n\ndotenv<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Database <span class=\"token operator\">=</span> <span class=\"token function\">knex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  client<span class=\"token operator\">:</span> <span class=\"token string\">\"mysql2\"</span><span class=\"token punctuation\">,</span>\n  connection<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    host<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_HOST</span><span class=\"token punctuation\">,</span>\n    port<span class=\"token operator\">:</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_PORT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    user<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_USER</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_PASSWORD</span><span class=\"token punctuation\">,</span>\n    database<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_NAME</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> model <span class=\"token operator\">=</span> typechat<span class=\"token punctuation\">.</span><span class=\"token function\">createLanguageModel</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"schema.ts\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> translator <span class=\"token operator\">=</span> typechat<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">createJsonTranslator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>DatabaseSchema<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  model<span class=\"token punctuation\">,</span>\n  schema<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"DatabaseSchema\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntypechat<span class=\"token punctuation\">.</span><span class=\"token function\">processRequests</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"😀> \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./input.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">raw</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> translator<span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> tables <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> table <span class=\"token keyword\">of</span> tables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> columns <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> <span class=\"token constant\">CREATE_TABLE</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">CREATE TABLE IF NOT EXISTS </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> column <span class=\"token keyword\">of</span> columns<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> allowNull <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> column<span class=\"token punctuation\">;</span>\n        <span class=\"token constant\">CREATE_TABLE</span> <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\\n  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">type</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>allowNull <span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\" NOT NULL\"</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token constant\">CREATE_TABLE</span> <span class=\"token operator\">=</span> <span class=\"token constant\">CREATE_TABLE</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\");\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">raw</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CREATE_TABLE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>کدهای کامل مثال فوق را نیز از <a href=\"https://github.com/SirwanAfifi/typechat-test\">اینجا</a> میتوانید دریافت کنید.</p>"}},"pageContext":{"slug":"typechat","lang":"FA"}},"staticQueryHashes":[]}